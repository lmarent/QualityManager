//
// RouteManager.c
//
// $Id: //ecodtn/0.1/include/RouteManager.c#1 $
//
// Library: Ecodtn
// Package: Route
// Module:  NetworkQuality
//
// Definition of the RouteManager class.
//
// Copyright (c) 2014, Luis Andres Marentes C.
// and Contributors.
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//

#include "RouteManager.h"
#include "RouteException.h"
// #include <Poco/Net/IPAddress.h>
// #include <Poco/Net/NetworkInterface.h>



namespace ecodtn
{

namespace net
{

RouteManager::RouteManager():
_sk(NULL),
_link_cache(NULL)
{
	int err;
	_sk = nl_socket_alloc();
	if ((err = nl_connect(_sk, NETLINK_ROUTE)) < 0) {
		throw RouteException("Socket connect error", err);
	}

	if ((err = rtnl_link_alloc_cache(_sk, AF_UNSPEC, &_link_cache))< 0){ 
	    throw RouteException("Unable to allocate cache", err); 
	}
	
}

RouteManager::~RouteManager()
{
	nl_cache_free(_link_cache);
	nl_socket_free(_sk);
}
	
void RouteManager::addRoute(Poco::Net::IPAddress ipaddress, 
						   Poco::Net::NetworkInterface netIntf, 
						   Poco::Net::IPAddress gatewayAddr)
{
	int val_result = 0;
	std::string ipAddr = ipaddress.toString();
	std::string intfName = netIntf.name();
	std::string gwAddr = gatewayAddr.toString();
	
	//val_result = route_add(_sk, _link_cache, ipAddr.c_str(), intfName.c_str(), gwAddr.c_str());
	check_error(val_result);
}

int RouteManager::existsRoute()
{
	int val_result = 0;
	return val_result;
}

void RouteManager::deleteRouter(Poco::Net::IPAddress ipaddress, 
							   Poco::Net::NetworkInterface netIntf, 
						       Poco::Net::IPAddress gatewayAddr)
{
	int val_result = 0;
	std::string ipAddr = ipaddress.toString();
	std::string intfName = netIntf.name();
	std::string gwAddr = gatewayAddr.toString();
	
	//val_result = route_delete(_sk, _link_cache, ipAddr.c_str(), intfName.c_str(), gwAddr.c_str());
	check_error(val_result);
}

void RouteManager::check_error(int err_result)
{
	if (err_result < 0){
		switch (err_result){
		case ECODTN_NET_RT_LINK_ERROR:
			throw RouteException("The interface does not exist", err_result);
			break;
		case ECODTN_NET_RT_ROUTE_ALLOC_ERROR: 
			throw RouteException("Unable to allocate memory for the route struct", err_result);
			break;
		case ECODTN_NET_RT_ADDR_PARSE_ERROR: 
			throw RouteException("Unable to parse the address", err_result);
			break;
		case ECODTN_NET_RT_ROUTE_SETUP_ERROR: 
			throw RouteException("Unable to set a parameter in the route", err_result);
			break;
		case ECODTN_NET_RT_ROUTE_ESTABLISH_ERROR: 
			throw RouteException("Error when adding the route", err_result);
			break;
		}
	}
}

} /// End net namespace

}  /// End ecodtn namespace
