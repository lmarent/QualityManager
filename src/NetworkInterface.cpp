//
// NetworkInterface.cpp
//
// $Id: //ecodtn/0.1/src/NetworkInterface.cpp#1 $
//
// Library: Ecodtn
// Package: TrafficControl
// Module:  NetworkQuality
//
// Definition of the NetworkInterface class.
//
// Copyright (c) 2014, Luis Andres Marentes C.
// and Contributors.
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//

#include "NetworkInterface.h"
#include <iostream>

namespace ecodtn
{

namespace net
{
		
	
NetworkInterface::NetworkInterface( std::string intfc_name,  uint32_t HandlerMaj_, uint32_t HandlerMin_):
HandlerMaj(HandlerMaj_),
HandlerMin(HandlerMin_),
_manager(intfc_name)
{
}
					   
NetworkInterface::~NetworkInterface()
{
}
	
uint32_t NetworkInterface::getMajorHandler()
{
	return HandlerMaj;
}
	
uint32_t NetworkInterface::getMinorHandler()
{
	return HandlerMin;
}

void NetworkInterface::addSubNetworkInterface(Poco::Net::NetworkInterface intf)
{
	_manager.addSubNetworkInterface(intf, HandlerMaj, HandlerMin,  
								1, 0);
}
	
void NetworkInterface::deleteSubNetworkInterface(Poco::Net::NetworkInterface intf)
{
	_manager.deleteSubNetworkInterface(intf);
}
	
void NetworkInterface::addQdiscRootHTB(void)
{
	_manager.addQdiscRootHTB();
}
	
void NetworkInterface::addClassRootHTB(uint64_t rate, uint64_t ceil, 
						  uint32_t burst, uint32_t cburst)
{
	_manager.addClassRootHTB(rate, ceil, burst, cburst);
}
	
void NetworkInterface::addClassHTB(Poco::Net::IPAddress ipaddr, uint64_t rate, 
					 uint64_t ceil, uint32_t burst, uint32_t cburst, 
					 uint32_t prio, int quantum, int limit, int perturb, 
					 char *keyval_str, char *keymask_str, int keyoff, int keyoffmask)
{
	/*_manager.addClassHTB(ipaddr, rate, ceil, burst, cburst, prio, quantum, 
						 limit, perturb, keyval_str, keymask_str, keyoff, 
						 keyoffmask);*/
	std::cout << "Pending";
}					 
	
void NetworkInterface::deleteClassHTB(Poco::Net::IPAddress ipaddr, 
									  uint64_t rate )
{
	// _manager.deleteClassHTB(ipaddr, rate );
}

}  /// End net namespace

}  /// End ecodtn namespace
