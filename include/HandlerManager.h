//
// HandlerManager.h
//
// $Id: //ecodtn/0.1/include/HandlerManager.h#1 $
//
// Library: Ecodtn
// Package: TrafficControl
// Module:  NetworkQuality
//
// Definition of the HandlerManager class.
//
// Copyright (c) 2014, Luis Andres Marentes C.
// and Contributors.
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//

#ifndef HandlerManager_INCLUDED
#define HandlerManager_INCLUDED

extern "C" {
  
  #include "tc_functions.h"
}

#include <map>

namespace ecodtn
{

namespace net
{
	
const uint16_t MAX_HANDLER=65535;

typedef std::map<uint32_t, uint16_t> release_numbers_map; 

class HandlerManager
{

public: 	
		
	
	HandlerManager();
					   
	~HandlerManager();
			
	uint16_t getNextValue();
	
	void releaseValue(uint16_t valueRelease);

private:

	uint16_t leftValue;
	uint16_t lastGivenValue; 
	// TODO: Code the Mutex part.
	//Poco::FastMutex _mutex_next_value;
	//Poco::FastMutex _mutex_left_value;

	
	void free_value(uint16_t valueRelease);
	
	void add_one_position(int index);
	// The Key could be more that the maximum 16 bit integer, with this we 
	// have that keys start in leftValue and end in leftvalue + MAX_HANDLER
	
	release_numbers_map released;	
};

}  /// End net namespace

}  /// End ecodtn namespace

#endif // HandlerManager_INCLUDED
