//
// TrafficControlManager.h
//
// $Id: //ecodtn/0.1/include/TrafficControlManager.h#1 $
//
// Library: Ecodtn
// Package: TrafficControl
// Module:  NetworkQuality
//
// Definition of the TrafficControlManager class.
//
// Copyright (c) 2014, Luis Andres Marentes C.
// and Contributors.
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//

#ifndef TrafficControl_Manager_INCLUDED
#define TrafficControl_Manager_INCLUDED


#include <Poco/Net/IPAddress.h>
#include <Poco/Mutex.h>
#include <Poco/Net/NetworkInterface.h>
#include <map>
#include "HandlerManager.h"

namespace ecodtn
{

namespace net
{



class SubNetworkInterface : public HandlerManager
{

public: 	
		
	
	SubNetworkInterface(Poco::Net::NetworkInterface &netIint, uint32_t parentMaj, 
					   uint32_t parentMin, uint32_t Maj, uint32_t Min);
					   
	~SubNetworkInterface();
	
	uint32_t getParentMajorHandler();
	
	uint32_t getParentMinorHandler();
	
	uint32_t getMajorHandler();
	
	uint32_t getMinorHandler();
	
private:

	Poco::Net::NetworkInterface net_interface;
	uint32_t parentMajHandler; 
	uint32_t parentMinHandler;
	uint32_t MajHandler; 
	uint32_t MinHandler;
	
	friend class TrafficControlManager;
};

typedef std::pair<std::string, SubNetworkInterface> interfNode;


class TrafficControlManager
{
public:

	TrafficControlManager(std::string intfc_name);
	~TrafficControlManager();
	
	void addSubNetworkInterface(Poco::Net::NetworkInterface intf, uint32_t parentMaj, 
								uint32_t parentMin,  uint32_t childMaj, uint32_t childMin);
	
	void deleteSubNetworkInterface(Poco::Net::NetworkInterface intf);
		
	void addQdiscRootHTB(void);

	void deleteQdiscRootHTB(void);
	
	void addClassRootHTB( uint64_t rate, uint64_t ceil, 
						  uint32_t burst, uint32_t cburst);

	void addClassHTB(Poco::Net::IPAddress ipaddr, Poco::Net::IPAddress submask, 
					 uint64_t rate, uint64_t ceil, uint32_t burst, 
					 uint32_t cburst, uint32_t prio, int quantum, 
					 int limit, int perturb);
	
	void deleteClassHTB(Poco::Net::IPAddress ipaddr, 
					    uint64_t rate, Poco::Net::IPAddress submask);
	

		
private:
	
	void check_error(int err_result);
	
	struct nl_sock *_sk;
	struct nl_cache *_link_cache;
	struct rtnl_link *_rtnlLink;
	std::map <std::string, SubNetworkInterface> _subInterfaces;
};

} /// End net namespace

}  /// End ecodtn namespace

#endif // TrafficControl_Manager_INCLUDED
