/*! \file   FlowIdSource.h



    Copyright 2014-2015 Universidad de los Andes, Bogotá, Colombia
    This file is part of Network QoS System (NETQOS).


    NETAUM is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.


    NETQOS is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this software; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

    Description:

    manage unique numeric for flow id space

    $Id: FlowIdSource.h 748 2016-11-15 12:06:00Z amarentes $

*/



#ifndef _FLOW_IDSOURCE_H_
#define _FLOW_IDSOURCE_H_



#include "stdincpp.h"
#include "Error.h"
#include "Logger.h"


/*! \short   generate unique id numbers



    The FlowIdSource class can generate unique 16 bit integer numbers for
    use by other functions. A single number can be lent from the pool of
    available numbers, and this number will not be generated by a call to
    the newId function until it has been previously released with a call
    to the freeId function.

*/



class FlowIdSource
{

  private:

    unsigned short num;

    int unique;

    list<unsigned short> freeIds; //!< list of previously freed (now unused) ids

    typedef vector<unsigned short> IdsReservContainer;

    typedef IdsReservContainer::iterator IdsReservIterator;

	IdsReservContainer idReserved;

  public:

    //! construct and initialize a FlowIdSource object
    //! if unique is set to 1 Ids should be unique until we wrap around the hex (ffe), decimal
    //! Valid filter item handles range from 1 to ffe hex 4094
    FlowIdSource(int unique = 0);


    //! destroy a FlowIdSource object
    ~FlowIdSource();


    /*! \short   generate a new internal id number
        return a new Id value that is currently not in use. This value will be
        marked as used and will not returned by a call to newId unless it has
        been released again with a call to freeId
        \returns unique unused id value
    */
    unsigned short newId( void );


    /*! \short   release an id number
        The released id number can be reused (i.e. returned by newId) after
        the call to freeId. Do not release numbers that have not been obtained
        by a call to newId this will result in unpredictable behaviour.
        \arg \c id - id value that is to be released for future use
    */
    void freeId( unsigned short id );



    //! dump a FlowIdSource object
    void dump( ostream &os );

};

//! overload for <<, so that a ResourceRequestIdSource object can be thrown into an iostream

ostream& operator<< ( ostream &os, FlowIdSource &ris );


#endif // _FLOW_IDSOURCE_H_