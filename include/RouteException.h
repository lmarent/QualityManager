//
// RouteException.h
//
// $Id: //ecodtn/0.1/QualityManager/include/RouteException.h#1 $
//
// Library: QualityManager/Route
// Package: QuoteManager
// Module:  RouteException
//
// Definition of the RouteException class.
//
// Copyright (c) 2008, Luis Andres Marentes C.
// and Contributors.
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//


#ifndef RouteException_INCLUDED
#define RouteException_INCLUDED


#include <Poco/Exception.h>
#include <typeinfo>
#include <string>


namespace ecodtn {
namespace net {


class RouteException: public Poco::Exception
	/// Base class for all Route Exceptions
{
public:
	RouteException(const std::string& msg, int code = 0);
		/// Creates MySQLException.

	RouteException(const RouteException& exc);
		/// Creates RouteException.

	~RouteException() throw();
		/// Destroys RouteException.

	RouteException& operator=(const RouteException& exc);
		/// Assignment operator.

	const char* name() const throw();
		/// Returns exception name.

	const char* className() const throw();
		/// Returns the name of the exception class.

	Poco::Exception* clone() const;
		/// Creates an exact copy of the exception.
		///
		/// The copy can later be thrown again by
		/// invoking rethrow() on it.

	void rethrow() const;
		/// (Re)Throws the exception.
		///
		/// This is useful for temporarily storing a
		/// copy of an exception (see clone()), then
		/// throwing it again.
};


//
// inlines
//
inline RouteException& RouteException::operator=(const RouteException& exc)
{
	Poco::Exception::operator=(exc);
	return *this;
}


inline const char* RouteException::name() const throw()
{
	return "RouterManager";
}


inline const char* RouteException::className() const throw()
{
	return typeid(*this).name();
}


inline Poco::Exception* RouteException::clone() const
{
	return new RouteException(*this);
}


inline void RouteException::rethrow() const
{
	throw *this;
}


} } // namespace ecodtn::net


#endif //RouteException_INCLUDED
